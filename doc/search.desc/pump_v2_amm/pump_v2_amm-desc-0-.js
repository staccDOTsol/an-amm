searchState.loadedDescShard("pump_v2_amm", 0, "The static program ID\nAn Anchor generated module, providing a set of structs …\nConfirms that a given pubkey is equivalent to the program …\nThe Anchor codegen exposes a programming model where a …\nSafety\nReturns the program ID\nAn Anchor generated module containing the program’s set …\nModule representing the program.\nGenerated client accounts for <code>AddLiquidity</code>.\nGenerated client accounts for <code>Buy</code>.\nGenerated client accounts for <code>Create</code>.\nGenerated client accounts for <code>Initialize</code>.\nGenerated client accounts for <code>RemoveLiquidity</code>.\nGenerated client accounts for <code>Sell</code>.\nGenerated client accounts for <code>SetParameters</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the name of this [#enum_name].\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis submodule is dedicated to handling the addition of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHandles liquidity addition to the AMM, ensuring that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExecutes a buy transaction where a user buys base tokens …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHandles the initialization of an AMM, setting up its basic …\nThis section defines the <code>initialize</code> module, which is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>remove_liquidity</code> module is responsible for handling …\nHandles the removal of liquidity by a user, ensuring …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis Sell module is responsible for handling the selling …\nExecutes a sell transaction where a user sells base tokens …\nAdjusts the AMM’s operational parameters including …\nSets the parameters of the AMM\nType representing the program.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCHECK: Only the event authority can invoke self-CPI\nCHECK: Only the event authority can invoke self-CPI\nCHECK: Only the event authority can invoke self-CPI\nCHECK: Only the event authority can invoke self-CPI\nCHECK: Only the event authority can invoke self-CPI\nCHECK: Only the event authority can invoke self-CPI\nCHECK: Only the event authority can invoke self-CPI\nCHECK: fee_recipient\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCHECK: Self-CPI will fail if the program is not the …\nCHECK: Self-CPI will fail if the program is not the …\nCHECK: Self-CPI will fail if the program is not the …\nCHECK: Self-CPI will fail if the program is not the …\nCHECK: Self-CPI will fail if the program is not the …\nCHECK: Self-CPI will fail if the program is not the …\nCHECK: Self-CPI will fail if the program is not the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIssue a spl_token <code>Transfer</code> instruction.")